@model Deerfly_Patches.ViewModels.ShoppingCart

@{
    ViewBag.Title = "Checkout";
}

<h2>Checkout</h2>

<div class="col-xs-12 col-md-10 col-lg-6" id="shipping-address">
    <h3>Ship To:</h3>
    <div id="shipping-address-display">
        <p>@Model.Order.ShipToAddress.Recipient</p>
        <p>@Model.Order.ShipToAddress.Address1</p>
        @if(Model.Order.ShipToAddress.Address2 != "")
        {
            <p>@Model.Order.ShipToAddress.Address2</p>
        }
        <p>@Model.Order.ShipToAddress.City, @Model.Order.ShipToAddress.State @Model.Order.ShipToAddress.Zip</p>
        <p>@Model.Order.ShipToAddress.Country</p>
        <p>@Model.Order.ShipToAddress.Phone</p>
    </div>
    <div class="hidden" id="shipping-address-edit">
        @using (Html.BeginForm())
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.Recipient, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.Recipient, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.Recipient, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.Address1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.Address1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.Address1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.Address2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.Address2, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.State, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.State, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.State, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.Zip, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.Zip, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.Zip, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.Country, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.Country, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Order.ShipToAddress.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Order.ShipToAddress.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.ShipToAddress.Phone, "", new { @class = "text-danger" })
                </div>
            </div>
            <button onclick="updateShippingAddress()">Save Shipping Address</button>
        }

    </div>

</div> 

<!--

Display shipping address
     Change

Form if not provided

Order Summary
    Products


    Order Total


    Pay with PayPal


-->




<div class="row" id="paypal-button" onload="renderPayPal();"></div>

<script src="https://www.paypalobjects.com/api/checkout.js"></script>

<script>
    var CREATE_PAYMENT_URL = '/paypal/createOrder';
    var EXECUTE_PAYMENT_URL = '/paypal/executePayment';

    paypal.Button.render({

        env: 'sandbox', // Or 'sandbox' / production

        commit: true, // Show a 'Pay Now' button

        payment: function () {
            return paypal.request.post(CREATE_PAYMENT_URL).then(function (data) {
                return data.id;
            });
        },

        onAuthorize: function (data) {
            return paypal.request.post(EXECUTE_PAYMENT_URL, {
                paymentID: data.paymentID,
                payerID: data.payerID
            }).then(function (data) {
                debugger;
                // The payment is complete!
                // You can now show a confirmation message to the customer
            });
        }

    }, '#paypal-button');
</script>